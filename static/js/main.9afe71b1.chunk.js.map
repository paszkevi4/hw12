{"version":3,"sources":["components/Search.jsx","components/Preloader.jsx","components/Planets.jsx","components/Movies.jsx","requests.js","HomeWork12.jsx","App.js","serviceWorker.js","index.js"],"names":["Search","charactersClickHandler","planetsClickHandler","currentMovie","setCurrentMovie","className","ButtonGroup","DropdownButton","as","title","variant","id","Dropdown","Item","onClick","Button","Preloader","role","Planets","text","clickHandler","page","Row","Card","style","width","Body","Title","Text","ListGroup","disabled","Movies","props","Table","striped","bordered","hover","instance","axios","baseURL","window","charArr","getPlanets","wookiee","get","then","response","data","getList","num","characters","getCharacters","a","temp","result","Promise","all","map","link","charLink","HomeWork12","useState","isFetching","setIsFetching","planetsPageActive","setPlanetsPageActive","moviesPageActive","setMoviesPageActive","currentPage","setCurrentPage","planets","setPlanets","setCharacters","requestPlanets","results","requestCharacters","movie","planetsToShow","el","name","charactersToShow","i","birth_year","gender","Container","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9afe71b1.chunk.js","sourcesContent":["import React from 'react';\r\nimport { ButtonGroup, Button, DropdownButton, Dropdown } from 'react-bootstrap';\r\n\r\nfunction Search({ charactersClickHandler, planetsClickHandler, currentMovie, setCurrentMovie }) {\r\n  //const [currentMovie, setCurrentMovie] = useState(1);\r\n  const moviesArr = [\r\n    '',\r\n    'A New Hope',\r\n    'The Empire Strikes Back',\r\n    'Return of the Jedi',\r\n    'The Phantom Menace',\r\n    'Attack of the Clones',\r\n    'Revenge of the Sith',\r\n  ];\r\n\r\n  return (\r\n    <div className=\"btnWrapper\">\r\n      <ButtonGroup>\r\n        <DropdownButton\r\n          as={ButtonGroup}\r\n          title={moviesArr[currentMovie]}\r\n          variant=\"success\"\r\n          id=\"bg-nested-dropdown\">\r\n          <Dropdown.Item\r\n            onClick={() => {\r\n              setCurrentMovie(1);\r\n            }}>\r\n            A New Hope\r\n          </Dropdown.Item>\r\n          <Dropdown.Item\r\n            onClick={() => {\r\n              setCurrentMovie(2);\r\n            }}>\r\n            The Empire Strikes Back\r\n          </Dropdown.Item>\r\n          <Dropdown.Item\r\n            onClick={() => {\r\n              setCurrentMovie(3);\r\n            }}>\r\n            Return of the Jedi\r\n          </Dropdown.Item>\r\n          <Dropdown.Item\r\n            onClick={() => {\r\n              setCurrentMovie(4);\r\n            }}>\r\n            The Phantom Menace\r\n          </Dropdown.Item>\r\n          <Dropdown.Item\r\n            onClick={() => {\r\n              setCurrentMovie(5);\r\n            }}>\r\n            Attack of the Clones\r\n          </Dropdown.Item>\r\n          <Dropdown.Item\r\n            onClick={() => {\r\n              setCurrentMovie(6);\r\n            }}>\r\n            Revenge of the Sith\r\n          </Dropdown.Item>\r\n        </DropdownButton>\r\n        <Button\r\n          variant=\"success\"\r\n          onClick={() => {\r\n            charactersClickHandler(currentMovie);\r\n          }}>\r\n          Search\r\n        </Button>\r\n      </ButtonGroup>\r\n      <Button\r\n        variant=\"warning\"\r\n        onClick={() => {\r\n          planetsClickHandler(1);\r\n        }}>\r\n        GET PLANETS\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Search;\r\n","import React from 'react';\r\n\r\nfunction Preloader() {\r\n  return (\r\n    <div className=\"preloaderWrapper\">\r\n      <div className=\"spinner-border text-danger ml-5\" role=\"status\">\r\n        <span className=\"sr-only\"></span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Preloader;\r\n","import React from 'react';\r\nimport { Card, ListGroup, Button, Row } from 'react-bootstrap';\r\n\r\nfunction Planets({ title, text, clickHandler, page }) {\r\n  return (\r\n    <Row className=\"justify-content-center container\">\r\n      <Card className=\"bg-dark\" style={{ width: '18rem' }}>\r\n        <Card.Body>\r\n          <Card.Title className=\"text-white\">{title}</Card.Title>\r\n          <Card.Text>\r\n            <ListGroup className=\"list-group-flush\">{text}</ListGroup>\r\n          </Card.Text>\r\n          <Button\r\n            disabled={page === 1}\r\n            onClick={() => {\r\n              clickHandler(--page);\r\n            }}>\r\n            PREV\r\n          </Button>\r\n          <Button\r\n            disabled={page === 6}\r\n            onClick={() => {\r\n              clickHandler(++page);\r\n            }}>\r\n            NEXT\r\n          </Button>\r\n        </Card.Body>\r\n      </Card>\r\n    </Row>\r\n  );\r\n}\r\n\r\nexport default Planets;\r\n","import React from 'react';\r\nimport { Table, thead, tbody } from 'react-bootstrap';\r\n\r\nfunction Movies(props) {\r\n  return (\r\n    <div className=\"container\">\r\n      <Table striped bordered hover variant=\"dark\">\r\n        <thead>\r\n          <tr>\r\n            <th>#</th>\r\n            <th>NAME</th>\r\n            <th>BIRTH DATE</th>\r\n            <th>GENDER</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>{props.text}</tbody>\r\n      </Table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Movies;\r\n","import * as axios from 'axios';\r\n\r\nlet instance = axios.create({\r\n  baseURL: 'https://swapi.dev/api/',\r\n});\r\n\r\nexport const getMoviesInfo = {};\r\n\r\nlet charArr = [];\r\nwindow.charArr = charArr;\r\n\r\nexport const getPlanets = (page = 2, wookiee) => {\r\n  return instance\r\n    .get(`planets/?page=${page}${wookiee ? '&format=wookiee' : ''}`)\r\n    .then((response) => response.data);\r\n};\r\n\r\nconst getList = (num = 4) => {\r\n  return instance.get(`films/${num}/`).then((response) => response.data.characters);\r\n};\r\n\r\nconst getCharactersInfo = (charLink) => {\r\n  return axios.get(`${charLink}`).then((response) => response.data);\r\n};\r\n\r\nexport const getCharacters = async (num) => {\r\n  let temp = await getList(num);\r\n  let result = Promise.all(temp.map((link) => getCharactersInfo(link)));\r\n  return result;\r\n};\r\n\r\n//https://swapi.dev/api/planets/?page=1&format=wookiee\r\n","import React, { useState } from 'react';\r\nimport Search from './components/Search';\r\nimport Preloader from './components/Preloader';\r\nimport Planets from './components/Planets';\r\nimport Movies from './components/Movies';\r\nimport { ListGroup } from 'react-bootstrap';\r\n\r\nimport { getPlanets, getCharacters } from './requests.js';\r\n\r\nfunction HomeWork12() {\r\n  const [isFetching, setIsFetching] = useState(false);\r\n\r\n  const [planetsPageActive, setPlanetsPageActive] = useState(false);\r\n  const [moviesPageActive, setMoviesPageActive] = useState(false);\r\n\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [currentMovie, setCurrentMovie] = useState(1);\r\n\r\n  const [planets, setPlanets] = useState([]);\r\n  const [characters, setCharacters] = useState([]);\r\n  //const [wookiee, setWookiee] = useState(true);\r\n\r\n  const requestPlanets = async (page) => {\r\n    setCurrentPage(page);\r\n    if (page > 6) {\r\n      setCurrentPage(6);\r\n      return;\r\n    } else if (page < 1) {\r\n      setCurrentPage(1);\r\n      return;\r\n    }\r\n    setIsFetching(true);\r\n    setMoviesPageActive(false);\r\n    await getPlanets(page).then((data) => {\r\n      setPlanets(data.results);\r\n    });\r\n    setIsFetching(false);\r\n    setPlanetsPageActive(true);\r\n  };\r\n\r\n  const requestCharacters = async (movie) => {\r\n    setIsFetching(true);\r\n    setPlanetsPageActive(false);\r\n\r\n    await getCharacters(movie).then((data) => {\r\n      setCharacters(data);\r\n    });\r\n\r\n    setMoviesPageActive(true);\r\n    setIsFetching(false);\r\n  };\r\n\r\n  let planetsToShow = planets.map((el) => <ListGroup.Item>{el.name}</ListGroup.Item>);\r\n  let charactersToShow = characters.map((el, i) => (\r\n    <tr>\r\n      <td>{i + 1}</td>\r\n      <td>{el.name}</td>\r\n      <td>{el.birth_year}</td>\r\n      <td>{el.gender}</td>\r\n    </tr>\r\n  ));\r\n\r\n  window.characters = characters;\r\n  window.planets = planets;\r\n  window.charactersToShow = charactersToShow;\r\n  window.planetsToShow = planetsToShow;\r\n\r\n  return (\r\n    <div>\r\n      <Search\r\n        charactersClickHandler={requestCharacters}\r\n        planetsClickHandler={requestPlanets}\r\n        currentMovie={currentMovie}\r\n        setCurrentMovie={setCurrentMovie}\r\n      />\r\n      {isFetching ? <Preloader /> : ''}\r\n      {moviesPageActive ? (\r\n        <Movies\r\n          //title={`Planets on page ${currentPage}`}\r\n          text={charactersToShow}\r\n          //page={currentPage}\r\n          //clickHandler={requestPlanets}\r\n        />\r\n      ) : (\r\n        ''\r\n      )}\r\n      {planetsPageActive ? (\r\n        <Planets\r\n          title={`Planets on page ${currentPage}`}\r\n          text={planetsToShow}\r\n          page={currentPage}\r\n          clickHandler={requestPlanets}\r\n        />\r\n      ) : (\r\n        ''\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HomeWork12;\r\n","import React from 'react';\nimport './App.css';\nimport HomeWork12 from './HomeWork12';\nimport Container from 'react-bootstrap/Container';\n\nexport default () => (\n  <>\n    <Container className=\"container\">\n      <HomeWork12 />\n    </Container>\n  </>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}